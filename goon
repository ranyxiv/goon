--[[
    @author depso (depths)
    @description Grow a Garden auto-farm script with Rayfield UI
    https://www.roblox.com/games/126884695634066
]]

--// Services
local ReplicatedStorage    = game:GetService("ReplicatedStorage")
local InsertService       = game:GetService("InsertService")
local MarketplaceService  = game:GetService("MarketplaceService")
local Players             = game:GetService("Players")
local RunService          = game:GetService("RunService")

local LocalPlayer   = Players.LocalPlayer
local Leaderstats   = LocalPlayer.leaderstats
local Backpack      = LocalPlayer.Backpack
local PlayerGui     = LocalPlayer.PlayerGui

local ShecklesCount = Leaderstats.Sheckles--[[
    @author depso (depthso)
    @description Grow a Garden auto-farm script
    https://www.roblox.com/games/126884695634066
]]

--// Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local InsertService = game:GetService("InsertService")
local MarketplaceService = game:GetService("MarketplaceService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local Leaderstats = LocalPlayer.leaderstats
local Backpack = LocalPlayer.Backpack
local PlayerGui = LocalPlayer.PlayerGui

local ShecklesCount = Leaderstats.Sheckles
local GameInfo = MarketplaceService:GetProductInfo(game.PlaceId)

--// ReGui
local ReGui = loadstring(game:HttpGet('https://raw.githubusercontent.com/depthso/Dear-ReGui/refs/heads/main/ReGui.lua'))()
local PrefabsId = "rbxassetid://" .. ReGui.PrefabsId

--// Folders
local GameEvents = ReplicatedStorage.GameEvents
local Farms = workspace.Farm

local Accent = {
    DarkGreen = Color3.fromRGB(45, 95, 25),
    Green = Color3.fromRGB(69, 142, 40),
    Brown = Color3.fromRGB(26, 20, 8),
}

--// ReGui configuration (Ui library)
ReGui:Init({
	Prefabs = InsertService:LoadLocalAsset(PrefabsId)
})
ReGui:DefineTheme("GardenTheme", {
	WindowBg = Accent.Brown,
	TitleBarBg = Accent.DarkGreen,
	TitleBarBgActive = Accent.Green,
    ResizeGrab = Accent.DarkGreen,
    FrameBg = Accent.DarkGreen,
    FrameBgActive = Accent.Green,
	CollapsingHeaderBg = Accent.Green,
    ButtonsBg = Accent.Green,
    CheckMark = Accent.Green,
    SliderGrab = Accent.Green,
})

--// Dicts
local SeedStock = {}
local OwnedSeeds = {}
local HarvestIgnores = {
	Normal = false,
	Gold = false,
	Rainbow = false
}

--// Globals
local SelectedSeed, AutoPlantRandom, AutoPlant, AutoHarvest, AutoBuy, SellThreshold, NoClip, AutoWalkAllowRandom

local function CreateWindow()
	local Window = ReGui:Window({
		Title = `{GameInfo.Name} | Depso`,
        Theme = "GardenTheme",
		Size = UDim2.fromOffset(300, 200)
	})
	return Window
end

--// Interface functions
local function Plant(Position: Vector3, Seed: string)
	GameEvents.Plant_RE:FireServer(Position, Seed)
	wait(.3)
end

local function GetFarms()
	return Farms:GetChildren()
end

local function GetFarmOwner(Farm: Folder): string
	local Important = Farm.Important
	local Data = Important.Data
	local Owner = Data.Owner

	return Owner.Value
end

local function GetFarm(PlayerName: string): Folder?
	local Farms = GetFarms()
	for _, Farm in next, Farms do
		local Owner = GetFarmOwner(Farm)
		if Owner == PlayerName then
			return Farm
		end
	end
    return
end

local IsSelling = false
local function SellInventory()
	local Character = LocalPlayer.Character
	local Previous = Character:GetPivot()
	local PreviousSheckles = ShecklesCount.Value

	--// Prevent conflict
	if IsSelling then return end
	IsSelling = true

	Character:PivotTo(CFrame.new(62, 4, -26))
	while wait() do
		if ShecklesCount.Value ~= PreviousSheckles then break end
		GameEvents.Sell_Inventory:FireServer()
	end
	Character:PivotTo(Previous)

	wait(0.2)
	IsSelling = false
end

local function BuySeed(Seed: string)
	GameEvents.BuySeedStock:FireServer(Seed)
end

local function BuyAllSelectedSeeds()
    local Seed = SelectedSeedStock.Selected
    local Stock = SeedStock[Seed]

	if not Stock or Stock <= 0 then return end

    for i = 1, Stock do
        BuySeed(Seed)
    end
end

local function GetSeedInfo(Seed: Tool): number?
	local PlantName = Seed:FindFirstChild("Plant_Name")
	local Count = Seed:FindFirstChild("Numbers")
	if not PlantName then return end

	return PlantName.Value, Count.Value
end

local function CollectSeedsFromParent(Parent, Seeds: table)
	for _, Tool in next, Parent:GetChildren() do
		local Name, Count = GetSeedInfo(Tool)
		if not Name then continue end

		Seeds[Name] = {
            Count = Count,
            Tool = Tool
        }
	end
end

local function CollectCropsFromParent(Parent, Crops: table)
	for _, Tool in next, Parent:GetChildren() do
		local Name = Tool:FindFirstChild("Item_String")
		if not Name then continue end

		table.insert(Crops, Tool)
	end
end

local function GetOwnedSeeds(): table
	local Character = LocalPlayer.Character
	
	CollectSeedsFromParent(Backpack, OwnedSeeds)
	CollectSeedsFromParent(Character, OwnedSeeds)

	return OwnedSeeds
end

local function GetInvCrops(): table
	local Character = LocalPlayer.Character
	
	local Crops = {}
	CollectCropsFromParent(Backpack, Crops)
	CollectCropsFromParent(Character, Crops)

	return Crops
end

local function GetArea(Base: BasePart)
	local Center = Base:GetPivot()
	local Size = Base.Size

	--// Bottom left
	local X1 = math.ceil(Center.X - (Size.X/2))
	local Z1 = math.ceil(Center.Z - (Size.Z/2))

	--// Top right
	local X2 = math.floor(Center.X + (Size.X/2))
	local Z2 = math.floor(Center.Z + (Size.Z/2))

	return X1, Z1, X2, Z2
end

local function EquipCheck(Tool)
    local Character = LocalPlayer.Character
    local Humanoid = Character.Humanoid

    if Tool.Parent ~= Backpack then return end
    Humanoid:EquipTool(Tool)
end

--// Auto farm functions
local MyFarm = GetFarm(LocalPlayer.Name)
local MyImportant = MyFarm.Important
local PlantLocations = MyImportant.Plant_Locations
local PlantsPhysical = MyImportant.Plants_Physical

local Dirt = PlantLocations:FindFirstChildOfClass("Part")
local X1, Z1, X2, Z2 = GetArea(Dirt)

local function GetRandomFarmPoint(): Vector3
    local FarmLands = PlantLocations:GetChildren()
    local FarmLand = FarmLands[math.random(1, #FarmLands)]

    local X1, Z1, X2, Z2 = GetArea(FarmLand)
    local X = math.random(X1, X2)
    local Z = math.random(Z1, Z2)

    return Vector3.new(X, 4, Z)
end

local function AutoPlantLoop()
	local Seed = SelectedSeed.Selected

	local SeedData = OwnedSeeds[Seed]
	if not SeedData then return end

    local Count = SeedData.Count
    local Tool = SeedData.Tool

	--// Check for stock
	if Count <= 0 then return end

    local Planted = 0
	local Step = 1

	--// Check if the client needs to equip the tool
    EquipCheck(Tool)

	--// Plant at random points
	if AutoPlantRandom.Value then
		for i = 1, Count do
			local Point = GetRandomFarmPoint()
			Plant(Point, Seed)
		end
	end
	
	--// Plant on the farmland area
	for X = X1, X2, Step do
		for Z = Z1, Z2, Step do
			if Planted > Count then break end
			local Point = Vector3.new(X, 0.13, Z)

			Planted += 1
			Plant(Point, Seed)
		end
	end
end

local function HarvestPlant(Plant: Model)
	local Prompt = Plant:FindFirstChild("ProximityPrompt", true)

	--// Check if it can be harvested
	if not Prompt then return end
	fireproximityprompt(Prompt)
end

local function GetSeedStock(IgnoreNoStock: boolean?): table
	local SeedShop = PlayerGui.Seed_Shop
	local Items = SeedShop:FindFirstChild("Blueberry", true).Parent

	local NewList = {}

	for _, Item in next, Items:GetChildren() do
		local MainFrame = Item:FindFirstChild("Main_Frame")
		if not MainFrame then continue end

		local StockText = MainFrame.Stock_Text.Text
		local StockCount = tonumber(StockText:match("%d+"))

		--// Seperate list
		if IgnoreNoStock then
			if StockCount <= 0 then continue end
			NewList[Item.Name] = StockCount
			continue
		end

		SeedStock[Item.Name] = StockCount
	end

	return IgnoreNoStock and NewList or SeedStock
end

local function CanHarvest(Plant): boolean?
    local Prompt = Plant:FindFirstChild("ProximityPrompt", true)
	if not Prompt then return end
    if not Prompt.Enabled then return end

    return true
end

local function CollectHarvestable(Parent, Plants, IgnoreDistance: boolean?)
	local Character = LocalPlayer.Character
	local PlayerPosition = Character:GetPivot().Position

    for _, Plant in next, Parent:GetChildren() do
        --// Fruits
		local Fruits = Plant:FindFirstChild("Fruits")
		if Fruits then
			CollectHarvestable(Fruits, Plants, IgnoreDistance)
		end

		--// Distance check
		local PlantPosition = Plant:GetPivot().Position
		local Distance = (PlayerPosition-PlantPosition).Magnitude
		if not IgnoreDistance and Distance > 15 then continue end

		--// Ignore check
		local Variant = Plant:FindFirstChild("Variant")
		if HarvestIgnores[Variant.Value] then continue end

        --// Collect
        if CanHarvest(Plant) then
            table.insert(Plants, Plant)
        end
	end
    return Plants
end

local function GetHarvestablePlants(IgnoreDistance: boolean?)
    local Plants = {}
    CollectHarvestable(PlantsPhysical, Plants, IgnoreDistance)
    return Plants
end

local function HarvestPlants(Parent: Model)
	local Plants = GetHarvestablePlants()
    for _, Plant in next, Plants do
        HarvestPlant(Plant)
    end
end

local function AutoSellCheck()
    local CropCount = #GetInvCrops()

    if not AutoSell.Value then return end
    if CropCount < SellThreshold.Value then return end

    SellInventory()
end

local function AutoWalkLoop()
	if IsSelling then return end

    local Character = LocalPlayer.Character
    local Humanoid = Character.Humanoid

    local Plants = GetHarvestablePlants(true)
	local RandomAllowed = AutoWalkAllowRandom.Value
	local DoRandom = #Plants == 0 or math.random(1, 3) == 2

    --// Random point
    if RandomAllowed and DoRandom then
        local Position = GetRandomFarmPoint()
        Humanoid:MoveTo(Position)
		AutoWalkStatus.Text = "Random point"
        return
    end
   
    --// Move to each plant
    for _, Plant in next, Plants do
        local Position = Plant:GetPivot().Position
        Humanoid:MoveTo(Position)
		AutoWalkStatus.Text = Plant.Name
    end
end

local function NoclipLoop()
    local Character = LocalPlayer.Character
    if not NoClip.Value then return end
    if not Character then return end

    for _, Part in Character:GetDescendants() do
        if Part:IsA("BasePart") then
            Part.CanCollide = false
        end
    end
end

local function MakeLoop(Toggle, Func)
	coroutine.wrap(function()
		while wait(.01) do
			if not Toggle.Value then continue end
			Func()
		end
	end)()
end

local function StartServices()
	--// Auto-Walk
	MakeLoop(AutoWalk, function()
		local MaxWait = AutoWalkMaxWait.Value
		AutoWalkLoop()
		wait(math.random(1, MaxWait))
	end)

	--// Auto-Harvest
	MakeLoop(AutoHarvest, function()
		HarvestPlants(PlantsPhysical)
	end)

	--// Auto-Buy
	MakeLoop(AutoBuy, BuyAllSelectedSeeds)

	--// Auto-Plant
	MakeLoop(AutoPlant, AutoPlantLoop)

	--// Get stocks
	while wait(.1) do
		GetSeedStock()
		GetOwnedSeeds()
	end
end

local function CreateCheckboxes(Parent, Dict: table)
	for Key, Value in next, Dict do
		Parent:Checkbox({
			Value = Value,
			Label = Key,
			Callback = function(_, Value)
				Dict[Key] = Value
			end
		})
	end
end

--// Window
local Window = CreateWindow()

--// Auto-Plant
local PlantNode = Window:TreeNode({Title="Auto-Plant 🥕"})
SelectedSeed = PlantNode:Combo({
	Label = "Seed",
	Selected = "",
	GetItems = GetSeedStock,
})
AutoPlant = PlantNode:Checkbox({
	Value = false,
	Label = "Enabled"
})
AutoPlantRandom = PlantNode:Checkbox({
	Value = false,
	Label = "Plant at random points"
})
PlantNode:Button({
	Text = "Plant all",
	Callback = AutoPlantLoop,
})

--// Auto-Harvest
local HarvestNode = Window:TreeNode({Title="Auto-Harvest 🚜"})
AutoHarvest = HarvestNode:Checkbox({
	Value = false,
	Label = "Enabled"
})
HarvestNode:Separator({Text="Ignores:"})
CreateCheckboxes(HarvestNode, HarvestIgnores)

--// Auto-Buy
local BuyNode = Window:TreeNode({Title="Auto-Buy 🥕"})
local OnlyShowStock

SelectedSeedStock = BuyNode:Combo({
	Label = "Seed",
	Selected = "",
	GetItems = function()
		local OnlyStock = OnlyShowStock and OnlyShowStock.Value
		return GetSeedStock(OnlyStock)
	end,
})
AutoBuy = BuyNode:Checkbox({
	Value = false,
	Label = "Enabled"
})
OnlyShowStock = BuyNode:Checkbox({
	Value = false,
	Label = "Only list stock"
})
BuyNode:Button({
	Text = "Buy all",
	Callback = BuyAllSelectedSeeds,
})

--// Auto-Sell
local SellNode = Window:TreeNode({Title="Auto-Sell 💰"})
SellNode:Button({
	Text = "Sell inventory",
	Callback = SellInventory, 
})
AutoSell = SellNode:Checkbox({
	Value = false,
	Label = "Enabled"
})
SellThreshold = SellNode:SliderInt({
    Label = "Crops threshold",
    Value = 15,
    Minimum = 1,
    Maximum = 199,
})

--// Auto-Walk
local WallNode = Window:TreeNode({Title="Auto-Walk 🚶"})
AutoWalkStatus = WallNode:Label({
	Text = "None"
})
AutoWalk = WallNode:Checkbox({
	Value = false,
	Label = "Enabled"
})
AutoWalkAllowRandom = WallNode:Checkbox({
	Value = true,
	Label = "Allow random points"
})
NoClip = WallNode:Checkbox({
	Value = false,
	Label = "NoClip"
})
AutoWalkMaxWait = WallNode:SliderInt({
    Label = "Max delay",
    Value = 10,
    Minimum = 1,
    Maximum = 120,
})

--// Connections
RunService.Stepped:Connect(NoclipLoop)
Backpack.ChildAdded:Connect(AutoSellCheck)

--// Services
StartServices()
local GameInfo      = MarketplaceService:GetProductInfo(game.PlaceId)

--// Folders & events
local GameEvents = ReplicatedStorage.GameEvents
local Farms      = workspace.Farm

--// Theme colors (unused by Rayfield but kept for reference)
local Accent = {
    DarkGreen = Color3.fromRGB(45, 95, 25),
    Green     = Color3.fromRGB(69, 142, 40),
    Brown     = Color3.fromRGB(26, 20, 8),
}

--// Data stores
local SeedStock      = {}
local OwnedSeeds     = {}
local HarvestIgnores = { Normal = false, Gold = false, Rainbow = false }

--// Toggle + slider objects (to preserve .Value API)
local SelectedSeed      = { Selected = "" }
local SelectedSeedStock = { Selected = "" }

local AutoPlant          = { Value = false }
local AutoPlantRandom    = { Value = false }
local AutoHarvest        = { Value = false }
local AutoBuy            = { Value = false }
local AutoSell           = { Value = false }
local SellThreshold      = { Value = 15 }
local AutoWalk           = { Value = false }
local AutoWalkAllowRandom= { Value = true }
local AutoWalkMaxWait    = { Value = 10 }
local NoClip             = { Value = false }

--// Core functions (unchanged)
local function Plant(Position: Vector3, Seed: string)
    GameEvents.Plant_RE:FireServer(Position, Seed)
    wait(.3)
end

local function GetFarms()
    return Farms:GetChildren()
end

local function GetFarmOwner(Farm)
    return Farm.Important.Data.Owner.Value
end

local function GetFarm(PlayerName)
    for _, farm in ipairs(GetFarms()) do
        if GetFarmOwner(farm) == PlayerName then
            return farm
        end
    end
end

local IsSelling = false
local function SellInventory()
    if IsSelling then return end
    IsSelling = true

    local char = LocalPlayer.Character
    local prevCFrame = char:GetPivot()
    local prevSheckles = ShecklesCount.Value

    char:PivotTo(CFrame.new(62,4,-26))
    repeat
        wait()
        GameEvents.Sell_Inventory:FireServer()
    until ShecklesCount.Value ~= prevSheckles

    char:PivotTo(prevCFrame)
    wait(.2)
    IsSelling = false
end

local function BuySeed(Seed)
    GameEvents.BuySeedStock:FireServer(Seed)
end

local function BuyAllSelectedSeeds()
    local seed = SelectedSeedStock.Selected
    local stock = SeedStock[seed]
    if not stock or stock <= 0 then return end
    for i = 1, stock do
        BuySeed(seed)
    end
end

local function GetSeedInfo(tool)
    local nameTag = tool:FindFirstChild("Plant_Name")
    local numTag  = tool:FindFirstChild("Numbers")
    if not nameTag or not numTag then return end
    return nameTag.Value, numTag.Value
end

local function CollectSeedsFromParent(parent, outTbl)
    for _, tool in ipairs(parent:GetChildren()) do
        local name, count = GetSeedInfo(tool)
        if name then
            outTbl[name] = { Count = count, Tool = tool }
        end
    end
end

local function CollectCropsFromParent(parent, outList)
    for _, tool in ipairs(parent:GetChildren()) do
        if tool:FindFirstChild("Item_String") then
            table.insert(outList, tool)
        end
    end
end

local function GetOwnedSeeds()
    table.clear(OwnedSeeds)
    CollectSeedsFromParent(Backpack, OwnedSeeds)
    CollectSeedsFromParent(LocalPlayer.Character or {}, OwnedSeeds)
    return OwnedSeeds
end

local function GetInvCrops()
    local list = {}
    CollectCropsFromParent(Backpack, list)
    CollectCropsFromParent(LocalPlayer.Character or {}, list)
    return list
end

local function GetArea(part)
    local c = part:GetPivot()
    local s = part.Size
    local x1 = math.ceil(c.X - s.X/2)
    local z1 = math.ceil(c.Z - s.Z/2)
    local x2 = math.floor(c.X + s.X/2)
    local z2 = math.floor(c.Z + s.Z/2)
    return x1, z1, x2, z2
end

local function EquipCheck(tool)
    local char = LocalPlayer.Character
    if tool.Parent == Backpack and char then
        char.Humanoid:EquipTool(tool)
    end
end

--// Farm area setup
local MyFarm        = GetFarm(LocalPlayer.Name)
local PlantLocations= MyFarm.Important.Plant_Locations
local PlantsPhysical= MyFarm.Important.Plants_Physical
local Dirt          = PlantLocations:FindFirstChildOfClass("Part")
local X1, Z1, X2, Z2= GetArea(Dirt)

local function GetRandomFarmPoint()
    local lands = PlantLocations:GetChildren()
    local land  = lands[math.random(#lands)]
    local a,b,c,d = GetArea(land)
    return Vector3.new(math.random(a,c), 4, math.random(b,d))
end

local function AutoPlantLoop()
    local seedData = OwnedSeeds[SelectedSeed.Selected]
    if not seedData or seedData.Count <= 0 then return end

    EquipCheck(seedData.Tool)
    if AutoPlantRandom.Value then
        for i=1, seedData.Count do
            Plant(GetRandomFarmPoint(), SelectedSeed.Selected)
        end
    end

    local planted = 0
    for x = X1, X2 do
        for z = Z1, Z2 do
            if planted >= seedData.Count then break end
            Plant(Vector3.new(x, .13, z), SelectedSeed.Selected)
            planted += 1
        end
    end
end

local function CanHarvest(model)
    local p = model:FindFirstChildWhichIsA("ProximityPrompt", true)
    return p and p.Enabled
end

local function HarvestPlant(model)
    local p = model:FindFirstChildWhichIsA("ProximityPrompt", true)
    if p then fireproximityprompt(p) end
end

local function CollectHarvestable(parent, outList, ignoreDist)
    local pos = LocalPlayer.Character:GetPivot().Position
    for _, m in ipairs(parent:GetChildren()) do
        if m:FindFirstChild("Fruits") then
            CollectHarvestable(m.Fruits, outList, ignoreDist)
        end
        local mp = m:GetPivot().Position
        if not ignoreDist and (pos-mp).Magnitude > 15 then continue end
        local var = m:FindFirstChild("Variant")
        if var and HarvestIgnores[var.Value] then continue end
        if CanHarvest(m) then table.insert(outList, m) end
    end
    return outList
end

local function GetHarvestablePlants(ignoreDist)
    return CollectHarvestable(PlantsPhysical, {}, ignoreDist)
end

local function HarvestPlants()
    for _, p in ipairs(GetHarvestablePlants()) do
        HarvestPlant(p)
    end
end

local function AutoSellCheck()
    if not AutoSell.Value then return end
    if #GetInvCrops() < SellThreshold.Value then return end
    SellInventory()
end

local function AutoWalkLoop()
    if IsSelling then return end

    local char    = LocalPlayer.Character
    local hum     = char and char:FindFirstChild("Humanoid")
    if not hum then return end

    local plants = GetHarvestablePlants(true)
    local doRand = AutoWalkAllowRandom.Value and (#plants == 0 or math.random(1,3)==2)

    if doRand then
        hum:MoveTo(GetRandomFarmPoint())
    else
        for _, p in ipairs(plants) do
            hum:MoveTo(p:GetPivot().Position)
        end
    end
end

local function NoclipLoop()
    if not NoClip.Value then return end
    local char = LocalPlayer.Character
    if not char then return end
    for _, part in ipairs(char:GetDescendants()) do
        if part:IsA("BasePart") then part.CanCollide = false end
    end
end

--// Utility: run loops
local function MakeLoop(toggleObj, fn)
    coroutine.wrap(function()
        while wait(.01) do
            if toggleObj.Value then fn() end
        end
    end)()
end

local function GetSeedStock(ignoreEmpty)
    local shop    = PlayerGui.Seed_Shop
    local items   = shop:FindFirstChild("Blueberry", true).Parent
    local out     = {}
    for _, btn in ipairs(items:GetChildren()) do
        local main = btn:FindFirstChild("Main_Frame")
        if not main then continue end
        local count = tonumber(main.Stock_Text.Text:match("%d+"))
        if ignoreEmpty then
            if count>0 then out[btn.Name] = count end
        else
            SeedStock[btn.Name] = count
        end
    end
    return ignoreEmpty and out or SeedStock
end

--// Services initializer
local function StartServices()
    -- update stocks and owned seeds
    coroutine.wrap(function()
        while wait(.1) do
            GetSeedStock()
            GetOwnedSeeds()
        end
    end)()

    MakeLoop(AutoPlant, AutoPlantLoop)
    MakeLoop(AutoHarvest, HarvestPlants)
    MakeLoop(AutoBuy,     BuyAllSelectedSeeds)
    MakeLoop(AutoWalk,    AutoWalkLoop)
    RunService.Stepped:Connect(NoclipLoop)
    Backpack.ChildAdded:Connect(AutoSellCheck)
end

--// Rayfield UI
local Rayfield = loadstring(game:HttpGet(
    "https://raw.githubusercontent.com/shlexware/Rayfield/main/source"
))()

local Window = Rayfield:CreateWindow({
    Name = GameInfo.Name .. " | Depso",
    LoadingTitle = "Loading UI...",
    ConfigurationSaving = { Enabled = false },
    KeySystem = false
})

-- Auto Plant Tab
local plantTab = Window:CreateTab("Auto Plant", 4483362458)
plantTab:CreateDropdown({
    Name = "Seed",
    Options = (function() return GetSeedStock(true) end)(),
    CurrentOption = "",
    Flag = "Plant_Seed",
    Callback = function(opt) SelectedSeed.Selected = opt end
})
plantTab:CreateToggle({
    Name = "Enabled",
    CurrentValue = false,
    Flag = "AutoPlant_Toggle",
    Callback = function(v) AutoPlant.Value = v end
})
plantTab:CreateToggle({
    Name = "Plant Randomly",
    CurrentValue = false,
    Flag = "AutoPlant_Random",
    Callback = function(v) AutoPlantRandom.Value = v end
})
plantTab:CreateButton({
    Name = "Plant All",
    Callback = AutoPlantLoop
})

-- Auto Harvest Tab
local harvestTab = Window:CreateTab("Auto Harvest", 4483362458)
harvestTab:CreateToggle({
    Name = "Enabled",
    CurrentValue = false,
    Flag = "AutoHarvest_Toggle",
    Callback = function(v) AutoHarvest.Value = v end
})
for variant,_ in pairs(HarvestIgnores) do
    harvestTab:CreateToggle({
        Name = "Ignore " .. variant,
        CurrentValue = false,
        Flag = "Ignore_"..variant,
        Callback = function(v) HarvestIgnores[variant] = v end
    })
end

-- Auto Sell Tab
local sellTab = Window:CreateTab("Auto Sell", 4483362458)
sellTab:CreateButton({
    Name = "Sell Inventory",
    Callback = SellInventory
})
sellTab:CreateToggle({
    Name = "Enabled",
    CurrentValue = false,
    Flag = "AutoSell_Toggle",
    Callback = function(v) AutoSell.Value = v end
})
sellTab:CreateSlider({
    Name = "Sell Threshold",
    Range = {1, 200},
    Increment = 1,
    CurrentValue = 15,
    Flag = "Sell_Threshold",
    Callback = function(v) SellThreshold.Value = v end
})

-- Misc Tab
local miscTab = Window:CreateTab("Misc", 4483362458)
miscTab:CreateToggle({
    Name = "NoClip",
    CurrentValue = false,
    Flag = "NoClip_Toggle",
    Callback = function(v) NoClip.Value = v end
})
miscTab:CreateToggle({
    Name = "Auto Walk",
    CurrentValue = false,
    Flag = "AutoWalk_Toggle",
    Callback = function(v) AutoWalk.Value = v end
})
miscTab:CreateToggle({
    Name = "Allow Random Walk",
    CurrentValue = true,
    Flag
